quest feature_pet_main begin
	state start begin
		when login with pc.get_level() >= 1 begin
			local playerID = pc.get_id()
			
			-- Tägliche Missionen zuweisen (falls keine vorhanden)
			local missions = feature_pet_missions.GetPlayerMissions(playerID)
			if not missions or #missions == 0 then
				feature_pet_missions.AssignDailyMissions(playerID)
			end
			
			-- Saisonale Events prüfen
			feature_pet_events.CheckSeasonalEvents()
		end
		
		when kill with not npc.is_pet() and not npc.is_mission() begin
			local playerID = pc.get_id()
			local monsterLevel = npc.get_level()
			
			-- Pet XP für Monster-Kill
			local activePet = feature_pet_system.GetActivePet(playerID)
			if activePet then
				local xpGain = monsterLevel * 10
				feature_pet_system.AddPetXP(playerID, activePet.id, xpGain)
				
				-- Mission-Fortschritt: Monster töten
				feature_pet_missions.UpdateMissionProgress(playerID, "KILL_MOBS", 1)
				
				-- Seelenfresser-DNA Effekt
				feature_pet_dna.ApplySoulEaterEffect(playerID, npc.get_race())
				
				-- Event-Bonus anwenden
				local eventBonus = feature_pet_events.GetEventBonus(playerID, "DROP_EXP")
				if eventBonus > 0 then
					feature_pet_system.AddPetXP(playerID, activePet.id, xpGain * eventBonus / 100)
				end
			end
			
			-- Boss-Kill
			if npc.is_boss() then
				feature_pet_missions.UpdateMissionProgress(playerID, "KILL_BOSSES", 1)
				
				-- Chance auf DNA-Drop (10%)
				if math.random(1, 100) <= 10 then
					local dnaItems = {1005100, 1005101, 1005102, 1005103, 1005104}
					local randomDNA = dnaItems[math.random(1, #dnaItems)]
					pc.give_item2(playerID, randomDNA, 1)
					pc.say(playerID, "🧬 DNA-Probe vom Boss erhalten!")
				end
			end
		end
		
		when 1005000.receive begin -- Feature Pet Truhe
			local playerID = pc.get_id()
			local result = feature_pet_chest.UseFeaturePetChest(playerID)
			if result then
				pc.remove_item(1005000, 1)
			end
		end
		
		when 1005001.receive begin -- Quality Wechsel Item
			local playerID = pc.get_id()
			pc.say(playerID, "Wähle ein Pet für Quality-Wechsel:")
			
			local pets = feature_pet_system.GetPlayerPets(playerID)
			if not pets or #pets == 0 then
				pc.say(playerID, "Du hast keine Pets!")
				return
			end
			
			for i, pet in ipairs(pets) do
				select(i, string.format("%s (Q%d)", pet.name, pet.quality_level))
			end
			select(#pets + 1, "Abbrechen")
			
			when select with input <= #pets do
				local selectedPet = pets[input]
				pc.say(playerID, "Wähle neue Quality:")
				
				for quality = 1, 8 do
					local qualityName = feature_pet_quality.GetQualityDisplayName(quality)
					select(quality, qualityName)
				end
				select(9, "Abbrechen")
				
				when select with input <= 8 do
					local newQuality = input
					local success = feature_pet_quality.UseQualitySwitchItem(playerID, selectedPet.id, newQuality)
					if success then
						pc.remove_item(1005001, 1)
						pc.say(playerID, "✅ Quality erfolgreich geändert!")
					else
						pc.say(playerID, "❌ Fehler beim Quality-Wechsel!")
					end
				end
			end
		end
		
		when 1005100.receive or 1005101.receive or 1005102.receive or 1005103.receive or 1005104.receive begin
			local playerID = pc.get_id()
			local itemVnum = get_trigger_item_vnum()
			
			local success = feature_pet_dna.UseDNAItem(playerID, itemVnum)
			if success then
				pc.remove_item(itemVnum, 1)
			end
		end
		
		when 1005200.receive begin -- Fusionsstein
			local playerID = pc.get_id()
			pc.say(playerID, "Wähle ein Pet zum Opfern:")
			
			local pets = feature_pet_system.GetPlayerPets(playerID)
			local activePet = feature_pet_system.GetActivePet(playerID)
			local availablePets = {}
			
			for _, pet in ipairs(pets) do
				if not pet.is_active and pet.id ~= activePet.id then
					table.insert(availablePets, pet)
				end
			end
			
			if #availablePets == 0 then
				pc.say(playerID, "Keine Pets zum Opfern verfügbar!")
				return
			end
			
			for i, pet in ipairs(availablePets) do
				select(i, string.format("%s (Lv%d, Q%d)", pet.name, pet.level, pet.quality_level))
			end
			select(#availablePets + 1, "Abbrechen")
			
			when select with input <= #availablePets do
				local sacrificePet = availablePets[input]
				if activePet then
					local success, message = feature_pet_fusion.StartPetFusion(playerID, activePet.id, sacrificePet.id)
					if success then
						pc.remove_item(1005200, 1)
						pc.say(playerID, message)
					else
						pc.say(playerID, message)
					end
				else
					pc.say(playerID, "Du musst ein aktives Pet haben!")
				end
			end
		end
		
		when levelup begin
			-- Pet XP für Level-Up des Spielers
			local playerID = pc.get_id()
			local activePet = feature_pet_system.GetActivePet(playerID)
			if activePet then
				local xpGain = pc.get_level() * 100
				feature_pet_system.AddPetXP(playerID, activePet.id, xpGain)
			end
		end
	end
end